---
import { Icon } from 'astro-icon/components'
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import ThemeTogggle from './ThemeToggle.astro';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const href = Astro.url;
---

<header id="header" class="min-h-[170px] md:min-h-[60px] px-6  bg-gradient-to-b from-gray-850 from-60%  justify-between flex w-full z-[100] border-b border-opacity-5 dark:border-neutral-800">

     <nav id="nav" class="flex  flex-col sm:flex-row gap-x-5 gap-y-3 mb-2 sm:mb-0 sm:gap-y-0  text-base font-normal xl:max-w-[1150px] relative mx-auto w-full items-center justify-center">
          <a href={href} aria-label="Main icon" id="mainIcon"   class="w-[48px] aspect-square mb-3  sm:mb-0 rounded-full relative overflow-hidden hover:bg-black dark:hover:bg-white mt-4 sm:mt-0 hover:bg-opacity-5 dark:hover:bg-opacity-5   ">
               <Icon name="icon"  class="text-[71px] pointer-events-none absolute mt-[6px] dark:text-white text-gray-700"/>
          </a>

          
          <div class="main relative  sm:static  left-0 mx-auto flex flex-row gap-x-5  dark:text-white text-[#1F2937]">
               <div id="list" class="flex px-4 flex-row gap-x-5 left-[50%] top-[50%] translate-y-[-50%] translate-x-[-50%] absolute font-semibold">
                    <a id="projectsanchor" class="opacity-80 hover:opacity-100 transition  duration-75  hover:text-lime-500 p-1 min-h-[48px] sm:min-h-fit flex flex-row items-center" href="#projects">{t("nav.projects")}</a>
                    <a id="experienceanchor" class="opacity-80 hover:opacity-100 transition  duration-75  hover:text-lime-500 p-1 min-h-[48px] sm:min-h-fit flex flex-row items-center" href="#experience">{t("nav.experience")}</a>
                    <a id="aboutanchor" class="opacity-80 hover:opacity-100 transition  duration-75  hover:text-lime-500 p-1 min-h-[48px] sm:min-h-fit flex flex-row items-center" href="#about">{t("nav.about")}</a>
               </div>

          </div>

          <div id="options" class="flex gap-2 mt-3 sm:mt-0 items-center flex-row justify-center sm:border-l sm:border-black dark:border-white sm:border-opacity-30 dark:border-opacity-30 sm:pl-4">
               <a aria-label="icon" class="min-w-[48px] p-2 w-full max-w-[48px] group aspect-square rounded-lg  hover:bg-black hover:bg-opacity-5 hover:dark:bg-white hover:dark:bg-opacity-5 sm:min-w-[32px] flex justify-center items-center" href="https://github.com/Estebanbss" target="_blank" rel="noreferrer"><Icon name="mdi:github" class="text-2xl dark:text-white text-[#1F2937] opacity-60 group-hover:opacity-100"/></a>
               <a  aria-label="icon"class="min-w-[48px] p-2 w-full max-w-[48px] group aspect-square rounded-lg  hover:bg-black hover:bg-opacity-5 hover:dark:bg-white hover:dark:bg-opacity-5 sm:min-w-[32px] flex justify-center items-center" href="https://www.linkedin.com/in/estebanbss/" target="_blank" rel="noreferrer"><Icon name="mdi:linkedin" class="text-2xl dark:text-white text-[#1F2937] opacity-60 group-hover:opacity-100 group-hover:text-blue-700 group-hover:dark:text-blue-700"/></a>

               <button aria-label="languageButton" class="relative p-2 group rounded-lg  hover:bg-black hover:bg-opacity-5 hover:dark:bg-white hover:dark:bg-opacity-5 flex flex-row justify-center items-center min-h-[48px] w-full max-w-[48px] sm:min-h-[32px]  aspect-square" id="languageButton">
                    <span id="spanLang" class="text-[12px] w-[18px] h-[18px] absolute   rounded-sm opacity-50  text-[#1F2937] dark:text-white leading-[17.7px] font-black font-sans group-hover:opacity-100">{lang.toUpperCase()}</span>
               </button>
               <div id="alertLanguage" class="border absolute hidden w-full max-w-[90px]  min-h-[100px]  flex-col top-[167px]  sm:top-[60px] opacity-90">
                    <button id="enButton" class="w-full p-1 dark:text-white  text-[#1F2937] font-bold border bg-white dark:bg-[#1F2937] opacity-100 px-4">
                         English
                    </button>
                    <button id="esButton" class="w-full p-1 dark:text-white  text-[#1F2937] font-bold border bg-white dark:bg-[#1F2937] opacity-100 px-4">
                         Español
                    </button>
                    <button id="frButton" class="w-full p-1 dark:text-white  text-[#1F2937] font-bold border bg-white dark:bg-[#1F2937] opacity-100 px-4">
                         Français
                    </button>
               </div>
               
               <ThemeTogggle/>
          </div>
     </nav>

</header>
 
<script is:inline>

document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('header');
    const mainIcon = document.getElementById('mainIcon');
    const options = document.getElementById('options');
    const nav = document.getElementById('nav');
    const list = document.getElementById('list');
    const languageButton = document.getElementById('languageButton');
    const enButton = document.getElementById('enButton');
    const esButton = document.getElementById('esButton');
    const frButton = document.getElementById('frButton');
    const alertLanguage = document.getElementById('alertLanguage');
    const projectsDiv = document.getElementById('projects');
    const projectsAnchor = document.getElementById('projectsanchor');
    const experienceDiv = document.getElementById('experience');
    const experienceAnchor = document.getElementById('experienceanchor');
    const aboutDiv = document.getElementById('about');
    const aboutAnchor = document.getElementById('aboutanchor');

    let change = false;
    function toggleLanguageAlert() {
        alertLanguage.classList.toggle('hidden');
        alertLanguage.classList.toggle('flex');
    }

    function changeLanguage(lang) {
        if(lang === 'es'){
               window.location.href = '/'; 
        }else{
          window.location.href = '/' + lang;
        }
    }

    function highlightNavLink(anchor, div) {
        if (window.scrollY >= div.offsetTop - 300) {
            projectsAnchor.classList.remove('text-lime-500');
            experienceAnchor.classList.remove('text-lime-500');
            aboutAnchor.classList.remove('text-lime-500');
            anchor.classList.add('text-lime-500');
        } else {
            anchor.classList.remove('text-lime-500');
        }
    }

    function handleScroll() {
        if (window.scrollY > header.offsetHeight && !change) {

          mainIcon.classList.add('hidden');
               options.classList.add('hidden');
               nav.classList.remove('relative')
               nav.classList.add('fixed','translate-x-[-50%]','top-5','left-1/2')
               list.classList.add('border','rounded-sm','dark:bg-neutral-400','bg-opacity-90','rounded-lg','bg-gray-100')
               change = true;
        } else if (window.scrollY < header.offsetHeight && change) {
          
               mainIcon.classList.remove('hidden');
               options.classList.remove('hidden');
               nav.classList.remove('fixed','translate-x-[-50%]', 'top-5','left-1/2','translate-x-[-50%]')
               nav.classList.add('relative')
               list.classList.remove('border','rounded-sm','dark:bg-neutral-400','bg-opacity-90','rounded-lg','bg-gray-100')
               change = false;
        }
    }


    function handleDocumentClick(event) {
        if (![languageButton, enButton, esButton, frButton, spanLang].includes(event.target)) {
            alertLanguage.classList.add('hidden');
            alertLanguage.classList.remove('flex');
        }
    }

    function handleKeyDown(event) {
        if (event.key === 'Escape') {
            alertLanguage.classList.add('hidden');
            alertLanguage.classList.remove('flex');
        }
    }

    function handleLanguageButtonClick() {
        toggleLanguageAlert();
    }

    function handleLanguageButton(lang) {
        return function() {
            changeLanguage(lang);
        };
    }

    function handleWindowScroll() {
        highlightNavLink(projectsAnchor, projectsDiv);
        highlightNavLink(experienceAnchor, experienceDiv);
        highlightNavLink(aboutAnchor, aboutDiv);
    }



    // Event listeners

    languageButton.addEventListener('click', handleLanguageButtonClick);
    enButton.addEventListener('click', handleLanguageButton('en'));
    esButton.addEventListener('click', handleLanguageButton('es'));
    frButton.addEventListener('click', handleLanguageButton('fr'));
    document.addEventListener('click', handleDocumentClick);
    document.addEventListener('keydown', handleKeyDown);
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('scroll', handleWindowScroll);
    // Initial setup


    handleScroll()
});


</script>